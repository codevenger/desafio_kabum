#!/usr/bin/perl

# Ativa o modo UTF8
binmode STDOUT, ":encoding(utf8)";
use utf8;

require "./inc/common.pl";


# Recebe valores de input do LOGIN
$username = lc(&get("username"));
if($username eq "") {
    $username = lc(&get("user"));
}
if($username eq "") {
    $username = lc(&get("usuario"));
}
$password = &get("password");
if($password eq "") {
    $password = &get("pass");
}
if($password eq "") {
    $password = &get("senha");
}
$idioma = &get("idioma");
if($idioma eq "") {
    $idioma = "pt_BR";
}
$sid = $ENV{'AUTHORIZATION'};
if($sid eq "") {
    $sid = $ENV{'HTTP_SID'};
}
$sid =~ s/^sid[\s|=|:]+//;
if($sid eq "" || $sid eq "undefined") {
    $sid = &get("sid");
}
if($sid eq "") {
    my $uri = $ENV{'REQUEST_URI'};
    if($uri =~ /[\?|&]+sid=(\S+)/) {
        $sid = $1;
    }
}
if($sid eq 'null') {
    $sid = '';
}
$ip = $ENV{'REMOTE_ADDR'};
$this = $ENV{'SCRIPT_NAME'};


if($sid ne "" && $sid !~ /^\d+$/) {
    error("Código de indentificação $sid inválido");
} elsif($username eq "" && $password eq "") {
    error("Você precisa informar um usuário e uma senha");
} elsif($username eq "") {
    error("Você precisa informar um usuário");
} elsif($password eq "") {
    error("Você precisa informar uma senha");
} else {
    $dbh->begin_work;
    $sth=$dbh->prepare(qq(select id AS code, JSON_OBJECT('id', id, 'username', username, 'name', name, 'email', email) AS user from users where username = ? and password = password(?) ));
    $sth->execute(($username, $password));
    if($dbh->err ne "") {
        error("Falha ao conferir o usuário e senha: ".$dbh->errstr);
    }
    $rv =  $sth->rows;
    
    if($rv == 0) {
        $dbh->rollback;
        deny();
    } elsif($rv == 1) {
        $row = $sth->fetchrow_hashref;
        
        if($sid =~ /^\d+$/) {
            $sth2 = $dbh->prepare(qq(select * from users_signin where user=? and sid=? and ip=? order by end desc));
            $sth2->execute(($row->{'code'}, $sid, $ip));
            if($dbh->err ne "") {
                error("Falha em localizar o sid no log do Login!");
            }
            if($sth2->rows > 0) {
                $row2 = $sth2->fetchrow_hashref;
                $sid = $row2->{'sid'};
                $user{entity} = $row->{'entity'};

                $rv = $dbh->do(qq(update users_signin set `end` = now(), `req` = 'Relogou no sistema' where sid = '$sid' and ip = '$ip'));
                if($dbh->err ne "") {
                    error("Falha atualizar sid no log!");
                }
            } else {
                $sid = "";
            }
        }

        # Gera um sID novo
        if($sid eq "") {
            $sid = time;
            $sid .= int(rand 99999)+1;
        }

        # Efetua log do login
        $rv = $dbh->do(qq(insert into users_signin (user, start, end, ip, sid, req) values ('$row->{code}', now() , now(), '$ip', '$sid', 'Logou no sistema')));
        if($dbh->err ne "") {
             error("Falha ao criar o log no Login!");
        }

        $dbh->commit;
        say_json('{"status": 200, "message": "Credencial aceita", "sid": "'.$sid.'", "user": '.$row->{user}.'}');
    } elsif($rv > 1) {
        $dbh->rollback();
        error("Lista de usuários inconsistente");
    } else {
        $dbh->rollback();
        error("Falha ao consultar lista de usuários");
    }
}






